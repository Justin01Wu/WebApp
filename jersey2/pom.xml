<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>wu.justin</groupId>
	<artifactId>jersey2</artifactId>
	<packaging>war</packaging>
	<version>1.0-SNAPSHOT</version>
	<name>jersey2 Maven Webapp</name>
	<url>http://maven.apache.org</url>


	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		
		<skip.integration.tests>true</skip.integration.tests>		
		<!-- by default we disable integration test -->
		<!-- please use this parameter to enable it: mvn clean install -Dskip.integration.tests=false -->
		
		<maven.tomcat.port>8080</maven.tomcat.port> 
        <!--  will get conflict with eclipse embedded Tomcat because we can't pass this parameter to Integration test case-->
        
        <tomcat.ajp.port>9009</tomcat.ajp.port>
		
	</properties>

	
	<repositories>
		<repository>
			<id>alfresco</id>
			<name>alfresco repo</name>
			<url>https://artifacts.alfresco.com/nexus/content/repositories/public/</url>
		</repository>
  </repositories>
  
  
	<profiles>
		<profile>
			<id>hasIntegrationTest</id>
			<activation>
				<property>
					<name>skip.integration.tests</name>
					<value>false</value>
				</property>
			</activation>
			<build>
				<plugins>
					<!-- start Tomcat for testing -->
					
					<plugin>
					
						<groupId>org.codehaus.cargo</groupId>
  						<artifactId>cargo-maven3-plugin</artifactId>
						<version>1.9.2</version>
                
						<configuration>
							<wait>true</wait>        
							<container>                
								<containerId>tomcat8x</containerId>
								<zipUrlInstaller>
									<url>https://repo1.maven.org/maven2/org/apache/tomcat/tomcat/8.5.63/tomcat-8.5.63.zip</url>
								</zipUrlInstaller>								
							</container>
							<configuration>            
								<type>standalone</type>
								<home>${project.basedir}/target/tomcat8x</home>
								<properties>
									<cargo.servlet.port>${maven.tomcat.port}</cargo.servlet.port>
									<cargo.tomcat.ajp.port>${tomcat.ajp.port}</cargo.tomcat.ajp.port>
									<cargo.jvmargs>-Xmx30720m</cargo.jvmargs> <!--  this will apply to container JVM -->
								</properties>
								<files>
									<copy>
										<file>${project.basedir}/src/main/resources/jersey2.properties</file>
										<todir>shared\classes</todir>										
									</copy>
								</files>

							</configuration>							

						</configuration>
					<executions>
                    
						<execution>
							<id>start-container</id>
							<phase>pre-integration-test</phase>
							<goals>
								<goal>start</goal>
							</goals>
						</execution>
						<execution>
							<id>stop-container</id>
							<phase>post-integration-test</phase>
							<goals>
								<goal>stop</goal>
							</goals>
						</execution>
					</executions>
				</plugin>					
				
				
				</plugins>
			</build>

		</profile>


	</profiles>


	<dependencies>
	
	
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
			<scope>provided</scope>
		</dependency>
		
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
			<scope>compile</scope>
		</dependency>
		
		<!-- JERSEY -->
		<dependency>
			<groupId>org.glassfish.jersey.containers</groupId>

			<!-- use this if your Servlet API >= 3.0 -->
			<!-- <artifactId>jersey-container-servlet</artifactId> -->

			<!-- if your container implements Servlet API older than 3.0, use "jersey-container-servlet-core" -->

			<artifactId>jersey-container-servlet</artifactId>

			<version>2.42</version>
		</dependency>
		
		<!-- this is required for java json mapping -->
		<dependency>
			<groupId>org.glassfish.jersey.media</groupId>
			<artifactId>jersey-media-json-jackson</artifactId>
			<scope>compile</scope>
			<version>2.42</version>
		</dependency>
		
		<!-- this is required for jersey-media-json-jackson since version 2.26, before it is hardcoded -->
		<!--  it is used in UserContextProvider -->
		<dependency>
			<groupId>org.glassfish.jersey.inject</groupId>
			<artifactId>jersey-hk2</artifactId>
			<version>2.42</version>
		</dependency>
		
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.1</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>com.jayway.jsonpath</groupId>
			<artifactId>json-path</artifactId>
			<version>2.7.0</version>
		</dependency>

		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.5.13</version>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>net.sf.jtidy</groupId>
			<artifactId>jtidy</artifactId>
			<version>r938</version>
			<scope>compile</scope>
		</dependency>
 
		<dependency>
    		<groupId>com.auth0</groupId>
    		<artifactId>java-jwt</artifactId>
    		<version>3.4.0</version>
		</dependency>
		
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.7</version>
			<scope>compile</scope>
		</dependency>		
		

		 
	</dependencies>

	<build>
		<finalName>jersey2</finalName>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<debug>true</debug>
					<source>21</source>
					<target>21</target>
					<release>21</release>
				</configuration>
			</plugin>
			
			<plugin>
				<groupId>io.swagger.core.v3</groupId>
				<artifactId>swagger-maven-plugin</artifactId>
				<version>2.2.22</version>
				<configuration>
					<outputFileName>openapi</outputFileName>
					<outputPath>${project.build.directory}/jersey2</outputPath>
					<outputFormat>JSON</outputFormat>
					<sortOutput>true</sortOutput>
					<alwaysResolveAppPath>true</alwaysResolveAppPath>
					<resourcePackages>wu.justin.rest2;wu.justin.rest3</resourcePackages>
					<prettyPrint>TRUE</prettyPrint>
					<openapi31>false</openapi31>
				</configuration>
				<executions>
					<execution>
						<id>generate-api-docs</id>
						<phase>compile</phase>
						<goals>
							<goal>resolve</goal>
						</goals>
					</execution>
				</executions>
			</plugin>			

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.4</version>
				<executions>
					<execution>
						<goals>
							<goal>test-jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- exclude integration testing from normal unit test -->
			<!-- comes from http://cupofjava.de/blog/2013/02/05/integration-tests-with-maven-and-tomcat/ -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.22.0</version>
				<configuration>
					<excludedGroups>wu.justin.IntegrationTest, wu.justin.ManualTest</excludedGroups>
					<parallel>classes</parallel>
					<threadCount>4</threadCount>
				</configuration>
			</plugin>
			

			<!-- run integration testing -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.22.0</version>

				<configuration>

					<includes>
						<include>**/*.java</include>
							<!-- By default, the failsafe plugin excludes various files. You have to override that. -->
							
						</includes>
					<skipITs>${skip.integration.tests}</skipITs>
					<groups>wu.justin.IntegrationTest</groups>
					<parallel>classes</parallel>
					<threadCount>4</threadCount>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>3.3.2</version>
				<configuration>
					<packagingExcludes>
						WEB-INF/classes/jersey2.properties,
					</packagingExcludes>
				</configuration>
			</plugin>
			
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>3.6.3</version>
				<configuration>
					<doclet>wu.justin.doclet.ApiDocs</doclet>

					<docletPath>${project.build.directory}/classes</docletPath>
					<sourcepath>${project.basedir}/src/main/java</sourcepath>
					<subpackages>wu.justin.rest2:wu.justin.rest3</subpackages>
					<useStandardDocletOptions>false</useStandardDocletOptions>
					<docletArtifacts>
                		<!--  has to declare doclet dependency if we need it -->
                    	<docletArtifact>
                        	<groupId>javax.ws.rs</groupId>
                        	<artifactId>javax.ws.rs-api</artifactId>
                        	<version>2.1.1</version>
                    	</docletArtifact>

                    	
                    	<docletArtifact>
            				<groupId>com.fasterxml.jackson.core</groupId>
            				<artifactId>jackson-databind</artifactId>
            				<version>2.16.2</version>
                    	</docletArtifact>
                    	
                	</docletArtifacts>					


				</configuration>
				<executions>
					<execution>
						<id>attach-javadoc</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>			


		</plugins>


	</build>

</project>
